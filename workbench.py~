#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# AmigaNG Workbench 3.1
# Version 0.3
# (c) 2014 - 2024
# by Wolfgang Schuster

import os
import time
import pygame
import psutil

from pygame.locals import (
	K_UP,
	K_DOWN,
	K_LEFT,
	K_RIGHT,
	K_ESCAPE,
	K_RETURN,
	KEYDOWN,
	QUIT,
)

pygame.init()
pygame.joystick.init()

width = 800
height = 600

if not pygame.font: print('Fehler pygame.font Modul konnte nicht geladen werden!')
menuefont = pygame.font.Font("fonts/AmigaTopaz.ttf", 15)
iconfont = pygame.font.Font("fonts/AmigaTopaz.ttf", 15)
font = pygame.font.Font("fonts/AmigaTopaz.ttf", 15)
	
class appicon:
	def __init__(self, name, typ, pos, befehl, image, image2):
		self.typ = typ		
		self.name = name		
		self.pos = pos 		
		self.befehl = befehl
		self.image = pygame.image.load(image)
		self.image2 = pygame.image.load(image2)
		self.clicked = False
		self.dclicked = False
		self.lastclick = time.time()

		self.rect = pygame.Rect(0,0,0,0)
		
	def ausgabe(self, surface, font):
		icon = pygame.Surface((self.image.get_width()+10,self.image.get_height()+6))
		icon.fill((170, 170, 170))
		if self.clicked:
			pygame.draw.line(icon, (255,255,255), [icon.get_width()-1,0], [icon.get_width()-1,icon.get_height()-1], 1)
			pygame.draw.line(icon, (255,255,255), [0, icon.get_height()-2], [icon.get_width()-1,icon.get_height()-2], 2)
			pygame.draw.line(icon, (0,0,0), [0, 0], [icon.get_width()-1,0], 2)
			pygame.draw.line(icon, (0,0,0), [0, 0], [0,icon.get_height()-1], 1)
			icon.blit(self.image2,(5,5))
		else:		
			pygame.draw.line(icon, (0,0,0), [icon.get_width()-1,0], [icon.get_width()-1,icon.get_height()-1], 1)
			pygame.draw.line(icon, (0,0,0), [0, icon.get_height()-2], [icon.get_width()-1,icon.get_height()-2], 2)
			pygame.draw.line(icon, (255,255,255), [0, 0], [icon.get_width()-1,0], 2)
			pygame.draw.line(icon, (255,255,255), [0, 0], [0,icon.get_height()-1], 1)
			icon.blit(self.image,(5,3))
		
		self.rect = surface.blit(icon, self.pos)
		text = font.render(self.name, True, (0, 0, 0))
		surface.blit(text, (self.pos[0]+icon.get_width()/2-text.get_width()/2,self.pos[1]+icon.get_height()+3))
		
	
class fenster:
	def __init__(self, typ, fenstername, fensterrect):
		self.typ = typ		
		self.fensterrect = fensterrect
		self.savefensterrect = pygame.Rect(0,0,0,0)
		self.savefensterrect.x = self.fensterrect.x
		self.savefensterrect.y = self.fensterrect.y
		self.savefensterrect.w = self.fensterrect.w
		self.savefensterrect.h = self.fensterrect.h														
		self.outfensterrect = (pygame.Rect(0,0,0,0))
		
		self.fenstername = fenstername
		self.workbenchmode = True
		self.aktiv = False
		self.farbe = (0,0,0)
		self.hinweistext = []
		self.icons = []
		self.verschieben = False
		self.size = False
		self.fenstercloserect = (0,0,0,0)	
		self.fenstertoprect = (0,0,0,0)	
		self.fenstervollrect = (0,0,0,0)	
		self.fensterfrontrect = (0,0,0,0)	
		self.fenstersizerect = (0,0,0,0)	
		self.fensterokrect = (0,0,0,0)	
		self.fenstercancelrect = (0,0,0,0)	
		self.fensterlinksrect = (0,0,0,0)	
		self.fensterrechtsrect = (0,0,0,0)	
		self.fensterobenrect = (0,0,0,0)	
		self.fensteruntenrect = (0,0,0,0)	
		self.surface = pygame.Surface((self.fensterrect.w, self.fensterrect.h))

	def ausgabe(self, screen, font):

		if self.aktiv:
			self.farbe = (102,136,187)
		else:
			self.farbe = (170,170,170)		

		if self.typ == "workbench" and self.workbenchmode == False:
			self.fensterrect = pygame.Rect(0,21,width,height-20)
	
		self.surface = pygame.Surface((self.fensterrect.w, self.fensterrect.h))
		
		self.surface.fill((170, 170, 170))	

		fensterwidth = self.surface.get_width()	
		fensterheight = self.surface.get_height()
		pygame.draw.rect(self.surface, (0,0,0), (0,0,fensterwidth,fensterheight), 1)	
		
		if self.typ == "workbench" and self.workbenchmode == False:
			self.fenstercloserect = (0,0,0,0)	
			self.fenstertoprect = (0,0,0,0)	
			self.fenstervollrect = (0,0,0,0)	
			self.fensterfrontrect = (0,0,0,0)	
			self.fenstersizerect = (0,0,0,0)	
			self.fensterokrect = (0,0,0,0)	
			self.fenstercancelrect = (0,0,0,0)	
			self.fensterlinksrect = (0,0,0,0)	
			self.fensterrechtsrect = (0,0,0,0)	
			self.fensterobenrect = (0,0,0,0)	
			self.fensteruntenrect = (0,0,0,0)	
			for icon in self.icons:
				icon.ausgabe(self.surface,font)
			return

		
		# Top	
		pygame.draw.rect(self.surface, (255,255,255), (0,0,fensterwidth,20), 0)
		pygame.draw.rect(self.surface, (0,0,0), (1,2,fensterwidth-1,20), 0)			
		pygame.draw.rect(self.surface, self.farbe, (1,2,fensterwidth-2,18), 0)			
		self.fenstertoprect=(18,0,fensterwidth-60, 20)
		
		if self.typ != "hinweis" and self.typ != "verlassen":

			# Schliessen
			pygame.draw.line(self.surface, (0,0,0), [17, 2], [17, 19], 1)
			pygame.draw.line(self.surface, (255,255,255),  [18, 2], [18, 19], 1)
			pygame.draw.rect(self.surface, (0,0,0), (6,6,6,10), 0)			
			pygame.draw.rect(self.surface, (255,255,255), (7,8,4,6), 0)	
			self.fenstercloserect = (1,2,17,18)	

			# Vergößern/Verkleinern				
			pygame.draw.line(self.surface, (0,0,0), [fensterwidth-44, 2], [fensterwidth-44, 19], 1)
			pygame.draw.line(self.surface, (255,255,255),  [fensterwidth-43, 2], [fensterwidth-43, 19], 1)
			pygame.draw.rect(self.surface, (0,0,0), (fensterwidth-39,4,14,14), 0)			
			pygame.draw.rect(self.surface, self.farbe, (fensterwidth-38,6,12,10), 0)			
			pygame.draw.rect(self.surface, (0,0,0), (fensterwidth-39,4,8,8), 0)			
			if self.aktiv:
				pygame.draw.rect(self.surface, (255,255,255), (fensterwidth-38,6,4,4), 0)		
			else:	
				pygame.draw.rect(self.surface, (170,170,170), (fensterwidth-38,6,4,4), 0)			
			self.fenstervollrect = (fensterwidth-42,2,20,18)	

		# Vordergrund					
		pygame.draw.line(self.surface, (0,0,0),  [fensterwidth-22, 2], [fensterwidth-22, 19], 1)
		if self.aktiv:
			pygame.draw.line(self.surface, (255,255,255),  [fensterwidth-21, 2], [fensterwidth-21, 19], 1)
		else:
			pygame.draw.line(self.surface, (170,170,170),  [fensterwidth-21, 2], [fensterwidth-21, 19], 1)
		pygame.draw.rect(self.surface, (0,0,0), (fensterwidth-18,4,10,10), 0)			
		pygame.draw.rect(self.surface, (170,170,170), (fensterwidth-17,6,8,6), 0)			
		pygame.draw.rect(self.surface, (0,0,0), (fensterwidth-13,8,10,10), 0)			
		pygame.draw.rect(self.surface, (255,255,255), (fensterwidth-12,10,8,6), 0)			
		self.fensterfrontrect=(fensterwidth-21,2, 20, 18)			

		# Left
		pygame.draw.rect(self.surface, self.farbe, (1,22,3,fensterheight-23), 0)			
		pygame.draw.rect(self.surface, (255,255,255), (0,0,1,fensterheight), 0)			
		pygame.draw.rect(self.surface, (0,0,0), (3,22,1,fensterheight-23), 0)			

		# Bottom
		pygame.draw.rect(self.surface, (0,0,0), (1,fensterheight-2,fensterwidth-1,2), 0)			
		pygame.draw.rect(self.surface, (255,255,255), (4,fensterheight-4,fensterwidth-5,2), 0)	
		
		if self.typ == "file":
			pygame.draw.rect(self.surface, self.farbe, (1,fensterheight-18,fensterwidth-20,16), 0)			
			pygame.draw.rect(self.surface, (255,255,255), (4,fensterheight-20,fensterwidth-16,2), 0)	
			pygame.draw.rect(self.surface, (0,0,0), (fensterwidth-20,fensterheight-18,1,16), 0)	
			pygame.draw.rect(self.surface, (255,255,255), (fensterwidth-38,fensterheight-18,1,16), 0)	
			pygame.draw.rect(self.surface, (0,0,0), (fensterwidth-39,fensterheight-18,1,16), 0)	
			pygame.draw.rect(self.surface, (255,255,255), (fensterwidth-57,fensterheight-18,1,16), 0)	
			self.fensterlinksrect = (fensterwidth-56,fensterheight-18,18,16)	
			self.fensterrechtsrect = (fensterwidth-37,fensterheight-18,17,16)	
			pygame.draw.line(self.surface, (0,0,0), [fensterwidth-46,fensterheight-15], [fensterwidth-51,fensterheight-10], 3)
			pygame.draw.line(self.surface, (0,0,0), [fensterwidth-51,fensterheight-10], [fensterwidth-46,fensterheight-5], 3)
			pygame.draw.line(self.surface, (0,0,0), [fensterwidth-30,fensterheight-15], [fensterwidth-25,fensterheight-10], 3)
			pygame.draw.line(self.surface, (0,0,0), [fensterwidth-25,fensterheight-10], [fensterwidth-30,fensterheight-5], 3)
			pygame.draw.rect(self.surface, (125,125,125), (4,fensterheight-16,fensterwidth-63,12), 0)			
										
		# Right
		if self.typ == "hinweis" or self.typ == "verlassen":
			pygame.draw.rect(self.surface, self.farbe, (fensterwidth-3,22,2,fensterheight-24), 0)			
			pygame.draw.rect(self.surface, (255,255,255), (fensterwidth-4,22,1,fensterheight-24), 0)			

		else:
			pygame.draw.rect(self.surface, self.farbe, (fensterwidth-18,22,17,fensterheight-24), 0)			
			pygame.draw.rect(self.surface, (255,255,255), (fensterwidth-19,22,1,fensterheight-24), 0)			
			pygame.draw.rect(self.surface, (255,255,255), (fensterwidth-18,fensterheight-20,17,2), 0)	
			pygame.draw.rect(self.surface, (0,0,0), (fensterwidth-15,fensterheight-16,12,12), 0)			
			if self.aktiv:
				pygame.draw.rect(self.surface, (255,255,255), (fensterwidth-14,fensterheight-14,10,8), 0)
			else:		
				pygame.draw.rect(self.surface, (170,170,170), (fensterwidth-14,fensterheight-14,10,8), 0)
			pygame.draw.line(self.surface, (0,0,0), [fensterwidth-13,fensterheight-7], [fensterwidth-6,fensterheight-14], 2)
			pygame.draw.rect(self.surface, self.farbe, (fensterwidth-15,fensterheight-16,6,6), 0)			
			pygame.draw.line(self.surface, self.farbe, [fensterwidth-16,fensterheight-6], [fensterwidth-5,fensterheight-17], 3)
			pygame.draw.line(self.surface, self.farbe, [fensterwidth-16,fensterheight-9], [fensterwidth-8,fensterheight-17], 3)
			self.fenstersizerect = (fensterwidth-18,fensterheight-18,17,16)	
			if self.typ == "file":
				pygame.draw.rect(self.surface, (0,0,0), (fensterwidth-18,fensterheight-21,17,1), 0)			
				pygame.draw.rect(self.surface, (255,255,255), (fensterwidth-18,fensterheight-38,17,1), 0)			
				pygame.draw.rect(self.surface, (0,0,0), (fensterwidth-18,fensterheight-39,17,1), 0)			
				pygame.draw.rect(self.surface, (255,255,255), (fensterwidth-18,fensterheight-57,17,1), 0)			
				self.fensteruntenrect = (fensterwidth-18,fensterheight-37,17,16)	
				self.fensterobenrect = (fensterwidth-18,fensterheight-56,17,17)	
				pygame.draw.line(self.surface, (0,0,0), [fensterwidth-15,fensterheight-32], [fensterwidth-10,fensterheight-27], 3)
				pygame.draw.line(self.surface, (0,0,0), [fensterwidth-10,fensterheight-27], [fensterwidth-5,fensterheight-32], 3)
				pygame.draw.line(self.surface, (0,0,0), [fensterwidth-15,fensterheight-46], [fensterwidth-10,fensterheight-51], 3)
				pygame.draw.line(self.surface, (0,0,0), [fensterwidth-5,fensterheight-46], [fensterwidth-10,fensterheight-51], 3)
				pygame.draw.rect(self.surface, (125,125,125), (fensterwidth-16,24,13,fensterheight-83), 0)			

		for icon in self.icons:
			icon.ausgabe(self.surface,font)
				

		tmptext = self.fenstername
		fenstertext = font.render(tmptext, True, (0, 0, 0))
		if self.typ == "hinweis" or self.typ == "verlassen":
			self.surface.blit(fenstertext,(4,3))
		else:
			self.surface.blit(fenstertext,(21,3))
					

		if self.typ == "hinweis" or self.typ == "verlassen":
			pygame.draw.rect(self.surface, (225,225,225), (4,22,fensterwidth-8,fensterheight-26), 0)			
			pygame.draw.rect(self.surface, (0,0,0), (9,27,fensterwidth-18,fensterheight-68), 0)			
			pygame.draw.rect(self.surface, (255,255,255), (10,29,fensterwidth-19,fensterheight-68), 0)			
			pygame.draw.rect(self.surface, (170,170,170), (10,29,fensterwidth-20,fensterheight-71), 0)			


		if self.typ == "hinweis" or self.typ == "verlassen":
			# OK-Button
			tmptext = "OK"
			buttonwidth = 30
			buttonheight = 20
			if self.typ == "hinweis":
				buttonposx = fensterwidth/2-buttonwidth/2
			elif self.typ == "verlassen":
				buttonposx = 13
			buttonposy = fensterheight-32				
			pygame.draw.rect(self.surface, (255,255,255), (buttonposx-1,buttonposy-1,buttonwidth+2,buttonheight+2), 0)			
			pygame.draw.rect(self.surface, (0,0,0), (buttonposx,buttonposy,buttonwidth+1,buttonheight+1), 0)			
			self.fensterokrect = pygame.draw.rect(self.surface, (170,170,170), (buttonposx,buttonposy,buttonwidth,buttonheight), 0)			
			buttontext = font.render(tmptext, True, (0, 0, 0))
			self.surface.blit(buttontext,((buttonposx+buttonwidth/2-buttontext.get_width()/2,buttonposy+buttonheight/2-buttontext.get_height()/2)))
			
	
			i = 0
			for htext in self.hinweistext:	
				tmptext = htext
				hinweistext = font.render(tmptext, True, (0, 0, 0))
				if self.typ == "verlassen":
					self.surface.blit(hinweistext,(fensterwidth/2-hinweistext.get_width()/2,40+i*(hinweistext.get_height()+2)))
				elif self.typ == "hinweis":
					self.surface.blit(hinweistext,(16,40+i*(hinweistext.get_height()+2)))
				i = i + 1

		if self.typ == "verlassen":
			# Cancle-Button
			tmptext = "ABBRECHEN"
			buttonwidth = 80
			buttonheight = 20
			buttonposx = fensterwidth-buttonwidth-12
			buttonposy = fensterheight-32
			pygame.draw.rect(self.surface, (255,255,255), (buttonposx-1,buttonposy-1,buttonwidth+2,buttonheight+2), 0)			
			pygame.draw.rect(self.surface, (0,0,0), (buttonposx,buttonposy,buttonwidth+1,buttonheight+1), 0)			
			self.fenstercancelrect = pygame.draw.rect(self.surface, (170,170,170), (buttonposx,buttonposy,buttonwidth,buttonheight), 0)			
			buttontext = font.render(tmptext, True, (0, 0, 0))
			self.surface.blit(buttontext,((buttonposx+buttonwidth/2-buttontext.get_width()/2,buttonposy+buttonheight/2-buttontext.get_height()/2)))

		
# Debug
#		print(self.fenstercancelrect)
#		pygame.draw.rect(screen, (255,0,0), (self.fensterrect.x+self.fenstercancelrect[0],self.fensterrect.y+self.fenstercancelrect[1],self.fenstercancelrect[2],self.fenstercancelrect[3]),0)
		
		return

	def leftmouseclick(self, screen, mousepos, leftclickpos, dclick):
		if pygame.Rect(self.fensterrect).collidepoint(leftclickpos) or self.verschieben:
			self.aktiv = True	
		else:
			self.aktiv = False

		if self.aktiv:
			for icon in self.icons:	
				if pygame.Rect(self.fensterrect.x+icon.rect[0],self.fensterrect.y+icon.rect[1],icon.rect[2],icon.rect[3]).collidepoint(leftclickpos):
					if dclick:
						print(self.fenstername)
						return("Befehl:"+ icon.befehl)
					icon.clicked=True
				else:
					icon.clicked=False

#			print(self.fenstername)

			if pygame.Rect(self.fensterrect.x+self.fenstercloserect[0],self.fensterrect.y+self.fenstercloserect[1],self.fenstercloserect[2],self.fenstercloserect[3]).collidepoint(leftclickpos):
				return("close")
			elif pygame.Rect(self.fensterrect.x+self.fensterokrect[0],self.fensterrect.y+self.fensterokrect[1],self.fensterokrect[2],self.fensterokrect[3]).collidepoint(leftclickpos):
				if self.typ=="verlassen":
					return("exit")
				elif self.typ=="hinweis":
					return("close")
				else:
					return("ok")
			elif pygame.Rect(self.fensterrect.x+self.fenstercancelrect[0],self.fensterrect.y+self.fenstercancelrect[1],self.fenstercancelrect[2],self.fenstercancelrect[3]).collidepoint(leftclickpos):
				return("close")
			elif pygame.Rect(self.fensterrect.x+self.fenstervollrect[0],self.fensterrect.y+self.fenstervollrect[1],self.fenstervollrect[2],self.fenstervollrect[3]).collidepoint(leftclickpos):
				if self.fensterrect==self.savefensterrect:
					self.savefensterrect.x = self.fensterrect.x
					self.savefensterrect.y = self.fensterrect.y
					self.savefensterrect.w = self.fensterrect.w
					self.savefensterrect.h = self.fensterrect.h						
					self.fensterrect.x = 0
					self.fensterrect.y = 0
					self.fensterrect.w = screen.get_width()
					self.fensterrect.h = screen.get_height()
				else:
					self.fensterrect.x = self.savefensterrect.x
					self.fensterrect.y = self.savefensterrect.y
					self.fensterrect.w = self.savefensterrect.w
					self.fensterrect.h = self.savefensterrect.h	
					
#				self.update()
#				self.updateout()				
				return("max")					

			elif pygame.Rect(self.fensterrect.x+self.fensterfrontrect[0],self.fensterrect.y+self.fensterfrontrect[1],self.fensterfrontrect[2],self.fensterfrontrect[3]).collidepoint(leftclickpos):
				print("To Front")
				return("front")

			elif pygame.Rect(self.fensterrect.x+self.fenstertoprect[0],self.fensterrect.y+self.fenstertoprect[1],self.fenstertoprect[2],self.fenstertoprect[3]).collidepoint(leftclickpos):
				self.verschieben=True
				return("top")

			elif pygame.Rect(self.fensterrect.x+self.fenstersizerect[0],self.fensterrect.y+self.fenstersizerect[1],self.fenstersizerect[2],self.fenstersizerect[3]).collidepoint(leftclickpos):
				self.size=True
				return("size")

				
			return("aktiv")
		return
		
#	def leftmousedoppelclick(self, screen, mousepos, leftclickpos):
#		print(leftclickpos)
#		if self.aktiv:
#		print(self.fenstername)
#		for icon in self.icons:
#			print(self.fensterrect.x+icon.rect[0],self.fensterrect.y+icon.rect[1],icon.rect[2],icon.rect[3])
#			if pygame.Rect(self.fensterrect.x+icon.rect[0],self.fensterrect.y+icon.rect[1],icon.rect[2],icon.rect[3]).collidepoint(leftclickpos):
#				return(icon.befehl)
					
		
	
def main():

	menueaktion = ""
	meldung = "Amigang Workbench 3.1 (c)2014-2024 Wolfgang Schuster"

	screen = pygame.display.set_mode([width, height])
	
	pygame.display.set_caption("Amigang Workbench 3.1")
	pygame.mouse.set_visible(1)
	#pygame.key.set_repeat(1,30)

	anzahljoy = pygame.joystick.get_count()
	print("Anzahl Joysticks: ", anzahljoy)
	if anzahljoy > 0:
		for i in range(anzahljoy):
			joystick = pygame.joystick.Joystick(i)
			joystick.init()	
			print("Name: ",joystick.get_name())
			numaxes = joystick.get_numaxes()
			print("Axes: ",numaxes)
			for i in range(numaxes):
				print(joystick.get_axis(i))
			numhats = joystick.get_numhats()
			print("Hats: ", numhats)
			
			print("Buttons: ",joystick.get_numbuttons())

			
	#Menue Images
	menuerechtsoben = pygame.image.load("images/menuerechtsoben.png")
	
	# Menueliste [Name, Menutyp (menue, submenue, subsubmenue),Obermenue,befehl, rect , anzahlsubmenues, id, aktiv]
	menue = [["Workbench", "menue", "", "", pygame.Rect(0,0,0,0), 0, 0, True]]
	menue.append(["Fenster", "menue", "", "", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Piktogramm", "menue", "", "", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Hilfsmittel", "menue", "", "", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Workbench als Hintergrund", "submenue", "Workbench", "Workbench als Hintergrund", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Befehl ausführen ...", "submenue", "Workbench", "Befehl ausführen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Bild neu aufbauen", "submenue", "Workbench", "Bild neu aufbauen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Alles aktualisieren", "submenue", "Workbench", "Alles aktualisieren", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Letzte Meldung anzeigen", "submenue", "Workbench", "Letzte Meldung anzeigen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Version Copyright", "submenue", "Workbench", "Version Copyright", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Workbench verlassen ...", "submenue", "Workbench", "Workbench verlassen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["neue Schublade", "submenue", "Fenster", "Fenster:neue Schublade", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["übergeordete Schublade", "submenue", "Fenster", "Fenster:übergeordete Schublade", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["schließen", "submenue", "Fenster", "Fenster:schließen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["aktualisieren", "submenue", "Fenster", "Fenster:aktualisieren", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["alles auswählen", "submenue", "Fenster", "Fenster:alles auswählen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Inhalt aufräumen", "submenue", "Fenster", "Fenster:Inhalt aufräumen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["fixieren                >>", "submenue", "Fenster:fixieren", "", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Inhalt anzeigen         >>", "submenue", "Fenster:anzeigen", "", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Inhalt auflisten        >>", "submenue", "Fenster:auflisten", "", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["öffnen", "submenue", "Piktogramm", "Piktogramm:öffnen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["kopieren", "submenue", "Piktogramm", "Piktogramm:kopieren", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["umbenennen ...", "submenue", "Piktogramm", "Piktogramm:umbenennen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Informationen", "submenue", "Piktogramm", "Piktogramm:Informationen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["fixieren", "submenue", "Piktogramm", "Piktogramm:fixieren", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Position freigeben", "submenue", "Piktogramm", "Piktogramm:Position freigeben", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["auslagern", "submenue", "Piktogramm", "Piktogramm:auslagern", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["zurücklegen", "submenue", "Piktogramm", "Piktogramm:zurücklegen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["-------------------------", "submenue", "Piktogramm", "", pygame.Rect(0,0,0,0), 0, 0, False])
	menue.append(["löschen ...", "submenue", "Piktogramm", "Piktogramm:löschen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Disk formatieren ...", "submenue", "Piktogramm", "disk:Disk formatieren", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["Papierkorb leeren", "submenue", "Piktogramm", "Papierkorb leeren", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["WB zurücksetzen", "submenue", "Hilfsmittel", "WB zurücksetzen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["des Fensters", "subsubmenue", "fixieren                >>", "fixieren des Fensters", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["alles", "subsubmenue", "fixieren                >>", "alles fixieren", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["* Nur Dateien mit Piktogr.", "subsubmenue", "Inhalt anzeigen         >>", "Folder:Inhalt Dateien mit Piktogr.", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["alle Dateien", "subsubmenue", "Inhalt anzeigen         >>", "Folder:Inhalt alles", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["als Piktogramm", "subsubmenue", "Inhalt auflisten        >>", "Folder:auflisten Piktogramm", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["nach Namen", "subsubmenue", "Inhalt auflisten        >>", "Folder:auflisten Namen", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["nach Datum", "subsubmenue", "Inhalt auflisten        >>", "Folder:auflisten Datum", pygame.Rect(0,0,0,0), 0, 0, True])
	menue.append(["nach Größe", "subsubmenue", "Inhalt auflisten        >>", "Folder:auflisten Größe", pygame.Rect(0,0,0,0), 0, 0, True])


	menueid = 1
	for menueeintrag in menue:
		menueeintrag[6] = menueid
		menueid = menueid + 1
		for submenueeintrag in menue:
			if submenueeintrag[2] == menueeintrag[0]:
				menueeintrag[5] = menueeintrag[5] + 1

	menuemode = 0
	aktivmenue = 0
	aktivuntermenuerect = pygame.Rect(0,0,0,0)
	aktivuntermenue = 0
	aktivsubuntermenuerect = pygame.Rect(0,0,0,0)
	aktivsubuntermenue = 0
	menueposx = 0
	menueposy = 0
	
	befehl = ""
	
	freemem = 0
	memtimer = 0
	
	leftclick = False
	rightclick = False
	leftclickpos = (0,0)
	rightclickpos = (0,0)
	leftdoppelclick = False

	aktivicon = 0
	
	aktivfolder = 0
	
	aktivshell = False

	aktivfenster = []
	
	fensterlastpos = (0,0)
	lastleftclick = time.time()
	
	# Workbenchfenster
		
	aktivfenster.append(fenster("workbench","Workbench",pygame.Rect(0,21,width,height-20)))
	aktivfenster[0].aktiv=True	
	aktivfenster[0].workbenchmode = True
	aktivfenster[0].icons.append(appicon("Ram Disk" ,"ramdisk", (140,40), "dir:ramdisk", "images/fd1.png", "images/fd2.png"))
	aktivfenster[0].icons.append(appicon("DH0" ,"hd", (20,100), "dir:dh0", "images/hd1.png", "images/hd2.png"))
	aktivfenster[0].icons.append(appicon("DH1" ,"hd", (20,170), "dir:dh1", "images/hd1.png", "images/hd2.png"))
	aktivfenster[0].icons.append(appicon("Shell" ,"cli", (30,240), "starte:Shell", "images/cli1.png", "images/cli2.png"))
		
	running = True
	while running:

		mousepos = pygame.mouse.get_pos()
	
		for event in pygame.event.get():
			if event.type == pygame.QUIT:
				running = False

# Tastatur
			if event.type == KEYDOWN:
				if event.key == K_ESCAPE:
					menueaktion = "ESC"
				elif event.key == K_RIGHT:
					menueaktion = "RIGHT"
				elif event.key == K_LEFT:
					menueaktion = "LEFT"
				elif event.key == K_DOWN:
					menueaktion = "DOWN"
				elif event.key == K_UP:
					menueaktion = "UP"
				elif event.key == K_RETURN:
					menueaktion = "RETURN"

# Maus
			elif event.type == pygame.MOUSEBUTTONUP:
				if event.button==1:
					leftclick = False
				if event.button==3:
					rightclick = False
					menuemode=1
					befehl=""
					if aktivsubuntermenue>0:
						if menue[aktivsubuntermenue-1][2]==menue[aktivuntermenue-1][0]:
							befehl = menue[aktivsubuntermenue-1][3]
					elif aktivuntermenue>0:
						if menue[aktivuntermenue-1][2]==menue[aktivmenue-1][0]:
							befehl = menue[aktivuntermenue-1][3]
					print(aktivmenue,aktivuntermenue,aktivsubuntermenue,befehl)
					
				if event.button==1:
					menuemode=1
				menuemode=1
			elif event.type == pygame.MOUSEBUTTONDOWN:
				if event.button==1:
					leftclick = True
					leftclickpos = mousepos
					if time.time()-lastleftclick < 0.2:
						leftdoppelclick=True
					else:
						leftdoppelclick=False
					lastleftclick = time.time()
				if event.button==3:
					rightclick = True
					rightclickpos = mousepos
					menuemode=2
					aktivmenue=0
					aktivuntermenue=0
					aktivsubuntermenue=0
														
# Joystick
			elif event.type == pygame.JOYAXISMOTION:
				if event.axis == 0:
					if event.value > 0.9:
						menueaktion = "RIGHT"
					elif event.value < -0.9:
						menueaktion = "LEFT"
				elif event.axis == 1:
					if event.value > 0.9:
						menueaktion = "DOWN"
					elif event.value < -0.9:
						menueaktion = "UP"
			elif event.type == pygame.JOYBUTTONDOWN:
				if event.button == 0:
					menueaktion = "RETURN"
				elif event.button == 1:
					menueaktion = "ESC"
								
# Aktionen ausführen

		if menueaktion != "":
			if menueaktion == "ESC":
				running = False
			menueaktion = ""
						
		screen.fill((170, 170, 170))


#		Menue anzeige

		untermenue=0;
		
		if memtimer==0:
			freemem = psutil.virtual_memory()[1]
			memtimer = 500
		memtimer = memtimer -1

		if menuemode == 0:
			menuetext = menuefont.render(str(meldung), True, (0, 0, 0))
			pygame.draw.rect(screen, (255,255,255), [0, 0, width, 20], 0)		
			pygame.draw.line(screen, (0,0,0), [0, 20], [width, 20], 2)	
			screen.blit(menuetext,(4,2)) 		

		if menuemode == 1:
			tmptext = "Amiga Workbench  " + str(freemem) + " Free RAM"
			menuetext = menuefont.render(tmptext, True, (0, 0, 0))
			pygame.draw.rect(screen, (255,255,255), [0, 0, width, 20], 0)		
			pygame.draw.line(screen, (0,0,0), [0, 20], [width, 20], 2)	
			pygame.draw.line(screen, (0,0,0), [width-1, 2], [width-1, 21], 1)	
			screen.blit(menuerechtsoben,(width-22,2))
			screen.blit(menuetext,(4,2)) 		
			
#
#		Fenster anzeigen

		if len(aktivfenster)>0:
			for afenster in aktivfenster:
				afenster.ausgabe(screen, iconfont)
				screen.blit(afenster.surface,(afenster.fensterrect.x, afenster.fensterrect.y))
				if afenster.verschieben or afenster.size:
					pygame.draw.rect(screen, (255, 0, 0), afenster.outfensterrect, 3)

				

#		Fenster Mausclick
				
		if len(aktivfenster)>0:
			isaktivclick = True
			for afenster in reversed(aktivfenster):
				if isaktivclick:
					if leftclick:
						aktion = afenster.leftmouseclick(screen, mousepos, leftclickpos, leftdoppelclick)
						if aktion=="" or aktion==None:
							afenster.aktiv=False
						elif(aktion[:7])=="Befehl:":
							befehl=aktion[7:]
						elif aktion == "close":
							aktivfenster.remove(afenster)
							aktivfenster[0].aktiv=True
							leftclick=False
							isaktivclick=False
						elif aktion == "exit":
							running=False
						elif aktion == "top" or afenster.verschieben:
							afenster.outfensterrect.x = afenster.fensterrect.x + mousepos[0]-leftclickpos[0]
							afenster.outfensterrect.y = afenster.fensterrect.y + mousepos[1]-leftclickpos[1]
							afenster.outfensterrect.w = afenster.fensterrect.w
							afenster.outfensterrect.h = afenster.fensterrect.h
							isaktivclick=False
							for a2fenster in reversed(aktivfenster):
								a2fenster.aktiv=False
							afenster.aktiv=True
						elif aktion == "size" or afenster.size:
							afenster.outfensterrect.x = afenster.fensterrect.x
							afenster.outfensterrect.y = afenster.fensterrect.y
							afenster.outfensterrect.w = afenster.fensterrect.w + mousepos[0]-leftclickpos[0]
							afenster.outfensterrect.h = afenster.fensterrect.h + mousepos[1]-leftclickpos[1]
							for a2fenster in reversed(aktivfenster):
								a2fenster.aktiv=False
							afenster.aktiv=True
						elif aktion=="aktiv":
							isaktivclick=False
							for a2fenster in reversed(aktivfenster):
								a2fenster.aktiv=False
							afenster.aktiv=True
					
#						else:
#							isaktivclick=False
							
																	
					else:
						if afenster.verschieben:					
							afenster.fensterrect.x = afenster.outfensterrect.x
							afenster.fensterrect.y = afenster.outfensterrect.y
							afenster.verschieben=False
							leftclick=False				
						elif afenster.size:					
							afenster.fensterrect.w = afenster.outfensterrect.w
							afenster.fensterrect.h = afenster.outfensterrect.h
							afenster.size=False
							leftclick=False	
					
			
#		Menue anzeigen bei rechtsclick
		if menuemode == 2:
			pygame.draw.rect(screen, (255,255,255), [0, 0, width, 20], 0)		
			pygame.draw.line(screen, (0,0,0), [0, 20], [width, 20], 2)	
			if aktivfenster[0].aktiv==True:
				for menueeintrag in menue:
					if menueeintrag[3].split(":")[0] == "Piktogramm":
						if aktivicon == 0:
							menueeintrag[7] = False
						else:
							menueeintrag[7] = True
					if menueeintrag[3].split(":")[0] == "Fenster":
						if aktivfolder == 0:
							menueeintrag[7] = False
						else:
							menueeintrag[7] = True
					if menueeintrag[3].split(":")[0] == "disk" :
						if aktivicon == 0:
							menueeintrag[7] = False
						elif icons[aktivicon-1][1]=="disk":
							menueeintrag[7] = True
					if menueeintrag[3] == "Papierkorb leeren":
						if aktivicon == 0:
							menueeintrag[7] = False
						elif icons[aktivicon-1][1]=="trash":
							menueeintrag[7] = True
	
	
				menueposx = 4
										
				# Menue
				for menueeintrag in menue:
								
					menueposy = 2
	
					if menueeintrag[1] == "menue":
	
						menueeintragtext = menuefont.render(menueeintrag[0], True, (0, 0, 0))
						menueeintrag[4] = screen.blit(menueeintragtext,(menueposx,menueposy))
						
						if menueeintrag[4].collidepoint(mousepos):
							aktivmenue = menueeintrag[6]
							
						if aktivmenue == menueeintrag[6]:
							pygame.draw.rect(screen, (0,0,0), (menueeintrag[4].x-2,menueeintrag[4].y-2,menueeintrag[4].w+4,menueeintrag[4].h+4), 0)		
							menueeintragtext = menuefont.render(menueeintrag[0], True, (255, 255, 255))
							menueeintrag[4] = screen.blit(menueeintragtext,(menueposx,menueposy))
	
							aktivuntermenuerect.x = menueeintrag[4].x-2
							aktivuntermenuerect.y = menueeintrag[4].y + menueeintrag[4].h
							aktivuntermenuerect.w = 240
							aktivuntermenuerect.h = menueeintrag[5]*18+8
	
							# Submenue
							pygame.draw.rect(screen, (255,255,255), (aktivuntermenuerect), 0)		
							pygame.draw.rect(screen, (0,0,0), (aktivuntermenuerect), 2)		
	
							for submenueeintrag in menue:
								if submenueeintrag[2] == menueeintrag[0]:
									menueposy = menueposy + menueeintrag[4].h + 2
									if submenueeintrag[7]:
										menueeintragtext = menuefont.render(submenueeintrag[0], True, (0, 0, 0))
									else:
										menueeintragtext = menuefont.render(submenueeintrag[0], True, (150, 150, 150))
									submenueeintrag[4] = screen.blit(menueeintragtext,(menueposx+4,menueposy+2))
									submenueeintrag[4].w = aktivuntermenuerect.w-8
	
									if submenueeintrag[4].collidepoint(mousepos):
										aktivuntermenue = submenueeintrag[6]
										
									if aktivuntermenue == submenueeintrag[6] and submenueeintrag[7]:
										pygame.draw.rect(screen, (0,0,0), (submenueeintrag[4].x-2,submenueeintrag[4].y-2,submenueeintrag[4].w,submenueeintrag[4].h+4), 0)		
										menueeintragtext = menuefont.render(submenueeintrag[0], True, (255, 255, 255))
										submenueeintrag[4] = screen.blit(menueeintragtext,(menueposx+3,menueposy+1))
	
										if submenueeintrag[5]	 > 0:	
											aktivsubuntermenuerect.x = submenueeintrag[4].x+submenueeintrag[4].w
											aktivsubuntermenuerect.y = submenueeintrag[4].y + menueeintrag[4].h - 20
											aktivsubuntermenuerect.w = 240
											aktivsubuntermenuerect.h = submenueeintrag[5]*18+8
	
											# SubSubmenue
											pygame.draw.rect(screen, (255,255,255), (aktivsubuntermenuerect), 0)		
											pygame.draw.rect(screen, (0,0,0), (aktivsubuntermenuerect), 2)		
	
											submenueposy = aktivsubuntermenuerect.y + 4
											submenueposx = aktivsubuntermenuerect.x + 2
	
											for subsubmenueeintrag in menue:
												if subsubmenueeintrag[2] == submenueeintrag[0]:
													menueeintragtext = menuefont.render(subsubmenueeintrag[0], True, (0, 0, 0))
													subsubmenueeintrag[4] = screen.blit(menueeintragtext,(submenueposx+4,submenueposy+2))
													subsubmenueeintrag[4].w = aktivuntermenuerect.w-8
	
													if subsubmenueeintrag[4].collidepoint(mousepos):
														aktivsubuntermenue = subsubmenueeintrag[6]
														
													if aktivsubuntermenue == subsubmenueeintrag[6]:
														pygame.draw.rect(screen, (0,0,0), (subsubmenueeintrag[4].x,subsubmenueeintrag[4].y-2,subsubmenueeintrag[4].w,subsubmenueeintrag[4].h+4), 0)		
														menueeintragtext = menuefont.render(subsubmenueeintrag[0], True, (255, 255, 255))
														submenueeintrag[4] = screen.blit(menueeintragtext,(submenueposx+3,submenueposy+1))
					
													submenueposy = submenueposy + subsubmenueeintrag[4].h + 2
					
							
	
						menueposx = menueposx + menueeintrag[4].w + 8
	
	

			

# Befehlsverarbeitung
		if befehl != "":
			print ("Befehl:", befehl)	
			for afenster in aktivfenster:
				afenster.aktiv=False
			if befehl=="Workbench verlassen":
				aktivfenster.append(fenster("verlassen","Workbench",pygame.Rect(0,0,220,140)))
				aktivfenster[len(aktivfenster)-1].hinweistext = ["Wollen Sie wirklich die"]				
				aktivfenster[len(aktivfenster)-1].hinweistext.append("Workbench verlassen?")
				aktivfenster[len(aktivfenster)-1].aktiv=True
			elif befehl=="Letzte Meldung anzeigen":
				menuemode=0
			elif befehl=="starte:Shell":
				aktivfenster.append(fenster("shell","AmigaShell",pygame.Rect(4,120,width-32,280)))
				aktivfenster[len(aktivfenster)-1].aktiv=True
			elif befehl=="dir:dh0":
				aktivfenster.append(fenster("file","DH0",pygame.Rect(4,120,width-32,280)))
				aktivfenster[len(aktivfenster)-1].aktiv=True
			elif befehl=="dir:dh1":
				aktivfenster.append(fenster("file","DH1",pygame.Rect(4,120,width-32,280)))
				aktivfenster[len(aktivfenster)-1].aktiv=True
			elif befehl=="dir:ramdisk":
				aktivfenster.append(fenster("file","Ramdisk",pygame.Rect(4,120,width-32,280)))
				aktivfenster[len(aktivfenster)-1].aktiv=True
			elif befehl=="Version Copyright":
				aktivfenster.append(fenster("hinweis","Version",pygame.Rect(0,0,200,170)))
				aktivfenster[len(aktivfenster)-1].aktiv=True
				aktivfenster[len(aktivfenster)-1].hinweistext = ["Amigang Workbench 3.1"]
				aktivfenster[len(aktivfenster)-1].hinweistext.append("Version 0.3")
				aktivfenster[len(aktivfenster)-1].hinweistext.append("(c) 2014-2024")
				aktivfenster[len(aktivfenster)-1].hinweistext.append("by Wolfgang Schuster")
			elif befehl=="Workbench als Hintergrund":
				if aktivfenster[0].workbenchmode==True:
					aktivfenster[0].workbenchmode=False
				else:
					aktivfenster[0].workbenchmode=True
					aktivfenster[0].aktiv = True
			
			if len(aktivfenster) == 1:
				aktivfenster[len(aktivfenster)-1].aktiv=True

			befehl = ""
		
		pygame.display.flip()
	
	pygame.quit()
	
main()